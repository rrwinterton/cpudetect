###############################################################################
#  INTEL CONFIDENTIAL
# 
#  Copyright (c) 2020-2024 Intel Corporation All Rights Reserved
# 
#  This software and the related documents are Intel copyrighted materials,
#  and your use of them is governed by the express license under which they
#  were provided to you ("License"). Unless the License provides otherwise,
#  you may not use, modify, copy, publish, distribute, disclose or transmit
#  this software or the related documents without Intel's prior written
#  permission.
# 
#  The source code contained or described herein and all documents related to
#  the source code ("Material") are owned by Intel Corporation or its suppliers
#  or licensors.
# 
#  This software and the related documents are provided as is,
#  with no express or implied warranties, other than those that are expressly
#  stated in the License.
# 
###############################################################################


cmake_minimum_required(VERSION 3.15)

# TODO: Specify the C++ standard [Placeholder - update version after we finalize]
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Only Debug and Release configurations are supported, make it so that only these
# two configurations are generated by CMake.
SET(CMAKE_CONFIGURATION_TYPES Debug Release CACHE INTERNAL "Only Debug and Release are supported for the IPF Extensible Framework" FORCE)

# CMake versions greater than 3.19 will complain about missing imported targets
# Ignore warnings about RelWithDebugInfo and MinSizeRel imported targets
cmake_policy(SET CMP0111 OLD)

if (WIN32)
set(OSLIBS)
SET(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDLL")
else()
set(OSLIBS)
endif (WIN32)

if (WIN32)
SET(CMAKE_CXX_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} /Zi /GS /sdl /guard:cf")
SET(CMAKE_CXX_FLAGS_RELEASE  "${CMAKE_CXX_FLAGS_RELEASE} /Zi /GS /sdl /guard:cf")
SET(CMAKE_C_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} /GS /sdl")
SET(CMAKE_C_FLAGS_RELEASE  "${CMAKE_CXX_FLAGS_RELEASE} /Zi /GS /sdl")
SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} /CETCOMPAT /NXCOMPAT /DYNAMICBASE /HIGHENTROPYVA /ALLOWISOLATION /guard:cf /debug:full")
# ALLOWISOLATION is incompatible with DLLs
SET(CMAKE_MODULE_LINKER_FLAGS  "${CMAKE_MODULE_LINKER_FLAGS} /CETCOMPAT /NXCOMPAT /DYNAMICBASE /HIGHENTROPYVA /guard:cf /debug:full") 
endif (WIN32)
#SET(CMAKE_CXX_FLAGS_RELEASE  "${CMAKE_CXX_FLAGS_RELEASE} /clr /Zc:twoPhase-")
#SET(CMAKE_MODULE_LINKER_FLAGS  "${CMAKE_MODULE_LINKER_FLAGS} /link comsuppw.lib") 

#################### Client Section ####################

# Import the ClientApiLib static library
add_library(ClientApiLib STATIC IMPORTED)
set_property(TARGET ClientApiLib PROPERTY IMPORTED_LOCATION_DEBUG "${CMAKE_SOURCE_DIR}/lib/Debug/ClientApiLib.lib")
set_property(TARGET ClientApiLib PROPERTY IMPORTED_LOCATION_RELEASE "${CMAKE_SOURCE_DIR}/lib/Release/ClientApiLib.lib")

# CPU detect CPP App
add_executable(cpudetect cpudetect.cpp)
target_link_libraries(cpudetect PUBLIC ClientApiLib ${OSLIBS})
target_include_directories(cpudetect PUBLIC "include" "include/thirdparty")



